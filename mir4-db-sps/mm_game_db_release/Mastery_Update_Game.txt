CREATE DEFINER=`MM_DBA`@`%` PROCEDURE `Mastery_Update_Game`(
	IN	_CharacterUID			BIGINT	UNSIGNED
,	IN	_MoneyType				TINYINT	UNSIGNED
,	IN	_MoneyDecreaseAmount	BIGINT
,	IN	_MoneyResultServer		BIGINT	UNSIGNED
,	IN	_MoneyUpdateTime		INT		UNSIGNED

,	IN	_DeleteItemUID01		BIGINT		UNSIGNED	
,	IN	_StackDecreaseAmount01	MEDIUMINT
,	IN	_StackResultServer01	MEDIUMINT	UNSIGNED		
,	IN	_DeleteItemUID02		BIGINT		UNSIGNED	
,	IN	_StackDecreaseAmount02	MEDIUMINT
,	IN	_StackResultServer02	MEDIUMINT	UNSIGNED		

,	IN	_MasterySlot01	TINYINT	UNSIGNED
,	IN	_MasteryCnt01	TINYINT	UNSIGNED
,	IN	_MasterySlot02	TINYINT	UNSIGNED
,	IN	_MasteryCnt02	TINYINT	UNSIGNED
,	IN	_MasterySlot03	TINYINT	UNSIGNED
,	IN	_MasteryCnt03	TINYINT	UNSIGNED
,	IN	_MasterySlot04	TINYINT	UNSIGNED
,	IN	_MasteryCnt04	TINYINT	UNSIGNED
,	IN	_MasterySlot05	TINYINT	UNSIGNED
,	IN	_MasteryCnt05	TINYINT	UNSIGNED
,	IN	_MasterySlot06	TINYINT	UNSIGNED
,	IN	_MasteryCnt06	TINYINT	UNSIGNED
,	IN	_MasterySlot07	TINYINT	UNSIGNED
,	IN	_MasteryCnt07	TINYINT	UNSIGNED

,	IN	_PlayDataIdx01		SMALLINT	UNSIGNED
,	IN	_PlayDataValue01	BIGINT		
,	IN	_PlayDataIdx02		SMALLINT	UNSIGNED
,	IN	_PlayDataValue02	BIGINT		
,	IN	_PlayDataIdx03		SMALLINT	UNSIGNED
,	IN	_PlayDataValue03	BIGINT		
,	IN	_PlayDataIdx04		SMALLINT	UNSIGNED
,	IN	_PlayDataValue04	BIGINT		
,	IN	_PlayDataIdx05		SMALLINT	UNSIGNED
,	IN	_PlayDataValue05	BIGINT		
,	IN	_PlayDataIdx06		SMALLINT	UNSIGNED
,	IN	_PlayDataValue06	BIGINT		
,	IN	_PlayDataIdx07		SMALLINT	UNSIGNED
,	IN	_PlayDataValue07	BIGINT		
,	IN	_PlayDataIdx08		SMALLINT	UNSIGNED
,	IN	_PlayDataValue08	BIGINT		
,	IN	_PlayDataIdx09		SMALLINT	UNSIGNED
,	IN	_PlayDataValue09	BIGINT		
,	IN	_PlayDataIdx10		SMALLINT	UNSIGNED
,	IN	_PlayDataValue10	BIGINT		

,	OUT _MoneyResultDB		BIGINT
,	OUT	_StackResultDB01	MEDIUMINT
,	OUT	_StackResultDB02	MEDIUMINT
,	OUT	_Result				INT
)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION	
    BEGIN 
		GET DIAGNOSTICS CONDITION 1	@Sqlstate = RETURNED_SQLSTATE, @Errno = MYSQL_ERRNO, @Text = MESSAGE_TEXT; 
        SET _Result = @Errno;	
-- 		SELECT @Sqlstate, @Errno, @Text; 
		ROLLBACK;
	END;
    
    SET _MoneyResultDB = 0, _StackResultDB01 = 0, _StackResultDB02 = 0, _Result = -1;
    
    MAIN_ROUTINE:
    BEGIN
		IF	_CharacterUID = 0 OR _MasterySlot01 = 0 OR _MasteryCnt01 = 0 OR _DeleteItemUID01 = 0	THEN 
			SET _Result = 3;	LEAVE MAIN_ROUTINE;	-- 처리에 필요한 값을 전달받지 못함
            
        ELSEIF	_MoneyDecreaseAmount >= 0 OR _StackDecreaseAmount01 >= 0 OR _StackDecreaseAmount02 > 0	THEN 
			SET _Result = 4;	LEAVE MAIN_ROUTINE;	-- 잘못된 증감값
        END IF;	
        
		START TRANSACTION;
			-- 재화 변경
-- 			IF	_MoneyDecreaseAmount < 0	THEN
				CALL Money_Update_DB ( 0, _CharacterUID, _MoneyType, _MoneyDecreaseAmount, _MoneyResultServer, _MoneyUpdateTime, _MoneyResultDB, _Result );
				IF _Result != 0	THEN ROLLBACK;	LEAVE MAIN_ROUTINE;	END IF;
-- 			END IF;
            
            -- 착용 숙련도 변경
				UPDATE mastery_tb	SET MasteryCnt = _MasteryCnt01	WHERE CharacterUID = _CharacterUID AND MasterySlot = _MasterySlot01;				
				IF ROW_COUNT() <= 0	THEN 					
					INSERT IGNORE INTO mastery_tb ( CharacterUID, MasterySlot, MasteryCnt )	VALUES  ( _CharacterUID, _MasterySlot01	, _MasteryCnt01 );				
					IF ROW_COUNT() <= 0	THEN ROLLBACK;	SET _Result = 5;	LEAVE MAIN_ROUTINE;	END IF;	-- 변경된 데이터가 없음
				END IF;						
            										
            IF	_MasterySlot02	> 0	THEN							
				UPDATE mastery_tb	SET MasteryCnt = _MasteryCnt02	WHERE CharacterUID = _CharacterUID AND MasterySlot = _MasterySlot02;				
				IF ROW_COUNT() <= 0	THEN 					
					INSERT IGNORE INTO mastery_tb ( CharacterUID, MasterySlot, MasteryCnt )	VALUES  ( _CharacterUID, _MasterySlot02	, _MasteryCnt02 );				
					IF ROW_COUNT() <= 0	THEN ROLLBACK;	SET _Result = 5;	LEAVE MAIN_ROUTINE;	END IF;	-- 변경된 데이터가 없음
				END IF;						
            END IF;										
            										
            IF	_MasterySlot03	> 0	THEN							
				UPDATE mastery_tb	SET MasteryCnt = _MasteryCnt03	WHERE CharacterUID = _CharacterUID AND MasterySlot = _MasterySlot03;				
				IF ROW_COUNT() <= 0	THEN 					
					INSERT IGNORE INTO mastery_tb ( CharacterUID, MasterySlot, MasteryCnt )	VALUES  ( _CharacterUID, _MasterySlot03	, _MasteryCnt03 );				
					IF ROW_COUNT() <= 0	THEN ROLLBACK;	SET _Result = 5;	LEAVE MAIN_ROUTINE;	END IF;	-- 변경된 데이터가 없음
				END IF;						
            END IF;										
            										
            IF	_MasterySlot04	> 0	THEN							
				UPDATE mastery_tb	SET MasteryCnt = _MasteryCnt04	WHERE CharacterUID = _CharacterUID AND MasterySlot = _MasterySlot04;				
				IF ROW_COUNT() <= 0	THEN 					
					INSERT IGNORE INTO mastery_tb ( CharacterUID, MasterySlot, MasteryCnt )	VALUES  ( _CharacterUID, _MasterySlot04	, _MasteryCnt04 );				
					IF ROW_COUNT() <= 0	THEN ROLLBACK;	SET _Result = 5;	LEAVE MAIN_ROUTINE;	END IF;	-- 변경된 데이터가 없음
				END IF;						
            END IF;										
            										
            IF	_MasterySlot05	> 0	THEN							
				UPDATE mastery_tb	SET MasteryCnt = _MasteryCnt05	WHERE CharacterUID = _CharacterUID AND MasterySlot = _MasterySlot05;				
				IF ROW_COUNT() <= 0	THEN 					
					INSERT IGNORE INTO mastery_tb ( CharacterUID, MasterySlot, MasteryCnt )	VALUES  ( _CharacterUID, _MasterySlot05	, _MasteryCnt05 );				
					IF ROW_COUNT() <= 0	THEN ROLLBACK;	SET _Result = 5;	LEAVE MAIN_ROUTINE;	END IF;	-- 변경된 데이터가 없음
				END IF;						
            END IF;										
            										
            IF	_MasterySlot06	> 0	THEN							
				UPDATE mastery_tb	SET MasteryCnt = _MasteryCnt06	WHERE CharacterUID = _CharacterUID AND MasterySlot = _MasterySlot06;				
				IF ROW_COUNT() <= 0	THEN 					
					INSERT IGNORE INTO mastery_tb ( CharacterUID, MasterySlot, MasteryCnt )	VALUES  ( _CharacterUID, _MasterySlot06	, _MasteryCnt06 );				
					IF ROW_COUNT() <= 0	THEN ROLLBACK;	SET _Result = 5;	LEAVE MAIN_ROUTINE;	END IF;	-- 변경된 데이터가 없음
				END IF;						
            END IF;										
            										
            IF	_MasterySlot07	> 0	THEN							
				UPDATE mastery_tb	SET MasteryCnt = _MasteryCnt07	WHERE CharacterUID = _CharacterUID AND MasterySlot = _MasterySlot07;				
				IF ROW_COUNT() <= 0	THEN 					
					INSERT IGNORE INTO mastery_tb ( CharacterUID, MasterySlot, MasteryCnt )	VALUES  ( _CharacterUID, _MasterySlot07	, _MasteryCnt07 );				
					IF ROW_COUNT() <= 0	THEN ROLLBACK;	SET _Result = 5;	LEAVE MAIN_ROUTINE;	END IF;	-- 변경된 데이터가 없음
				END IF;						
            END IF;										
            										
			-- 아이템 스택 변경
--             IF	_DeleteItemUID01	> 0 THEN							
				CALL ItemStack_Update_DB ( _CharacterUID, _DeleteItemUID01	, 0, _StackDecreaseAmount01	, _StackResultServer01	, _StackResultDB01	, _Result );	
				IF _Result != 0 THEN ROLLBACK;	LEAVE MAIN_ROUTINE;	END IF;	
--             END IF;	
            IF	_DeleteItemUID02	> 0 THEN							
				CALL ItemStack_Update_DB ( _CharacterUID, _DeleteItemUID02	, 0, _StackDecreaseAmount02	, _StackResultServer02	, _StackResultDB02	, _Result );	
				IF _Result != 0 THEN ROLLBACK;	LEAVE MAIN_ROUTINE;	END IF;	
            END IF;	
            
            -- 플레이 데이터 변경
            IF	_PlayDataIdx01 > 0 OR _PlayDataIdx02 > 0 OR _PlayDataIdx03 > 0 OR _PlayDataIdx04 > 0 OR _PlayDataIdx05 > 0 
			OR	_PlayDataIdx06 > 0 OR _PlayDataIdx07 > 0 OR _PlayDataIdx08 > 0 OR _PlayDataIdx09 > 0 OR _PlayDataIdx10 > 0	THEN
				CALL PlayData_Update_DB	( _CharacterUID
										, _PlayDataIdx01	, _PlayDataValue01
										, _PlayDataIdx02	, _PlayDataValue02
										, _PlayDataIdx03	, _PlayDataValue03
										, _PlayDataIdx04	, _PlayDataValue04
										, _PlayDataIdx05	, _PlayDataValue05
										, _PlayDataIdx06	, _PlayDataValue06
										, _PlayDataIdx07	, _PlayDataValue07
										, _PlayDataIdx08	, _PlayDataValue08
										, _PlayDataIdx09	, _PlayDataValue09
										, _PlayDataIdx10	, _PlayDataValue10
										, _Result	);
				IF _Result != 0 THEN ROLLBACK;	LEAVE MAIN_ROUTINE;	END IF;		
            END IF;
            
			SET	_Result = 0;
		COMMIT;
    END;
END