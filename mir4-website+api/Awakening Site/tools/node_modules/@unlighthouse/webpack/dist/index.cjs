'use strict';

const unplugin = require('unplugin');
const lodashEs = require('lodash-es');
const core = require('@unlighthouse/core');
const server = require('@unlighthouse/server');

const PLUGIN_NAME = "unlighthouse:webpack";
const setupWebpack = lodashEs.once(async (config, compiler) => {
  const logger = core.useLogger();
  logger.debug("Setting up unlighthouse webpack plugin.");
  if (compiler.options.mode !== "development") {
    logger.debug("Not starting unlighthouse, webpack is not in development mode.");
    return;
  }
  const linkUnlighthouse = lodashEs.once(() => {
    const unlighthouse2 = core.useUnlighthouse();
    logger.success(`\u26F5  Start Unlighthouse - ${unlighthouse2.runtimeSettings.clientUrl}`);
  });
  compiler.hooks.done.tap("unlighthouse", linkUnlighthouse);
  compiler.hooks.invalid.tap(PLUGIN_NAME, (resource) => {
    if (!resource)
      return;
    const { worker } = core.useUnlighthouse();
    worker.invalidateFile(resource);
  });
  const ensureUnlighthouse = async () => {
    const unlighthouse2 = core.useUnlighthouse();
    if (unlighthouse2)
      return unlighthouse2;
    return await core.createUnlighthouse({
      ...config,
      root: compiler.options.context
    }, {
      name: "webpack"
    });
  };
  const unlighthouse = await ensureUnlighthouse();
  const setupServer = async () => {
    const ensureServer = async () => {
      if (unlighthouse.runtimeSettings.server)
        return unlighthouse.runtimeSettings.server;
      const { server: server$1, app } = await server.createServer();
      await unlighthouse.setServerContext({ url: server$1.url, server: server$1.server, app });
      return server$1;
    };
    await ensureServer();
  };
  if (unlighthouse.resolvedConfig.site) {
    await setupServer();
  } else {
    unlighthouse.hooks.hookOnce("site-changed", async () => {
      await setupServer();
    });
  }
});
function WebpackPlugin(configOrPath) {
  return unplugin.createUnplugin(() => {
    return {
      name: "unlighthouse:webpack",
      webpack(compiler) {
        setupWebpack(configOrPath, compiler);
      }
    };
  }).webpack();
}

module.exports = WebpackPlugin;
